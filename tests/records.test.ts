import request from 'supertest';
import { expect } from 'chai';
import app from '../src/expressapi';
import { TestUtils } from './helpers/test-utils';

describe('Records API', () => {
  before(async function() {
    this.timeout(30000);
    console.log('üßπ [Records Tests] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏');
    TestUtils.setupTestCleanup();
    
    // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    TestUtils.enableCMSSettingsLogging(true);
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
    await TestUtils.backupCMSSettings();
  });

  after(async function() {
    this.timeout(30000);
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    await TestUtils.restoreCMSSettings();
  });

  beforeEach(async function() {
    this.timeout(10000);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    await TestUtils.useCMSTestingPreset();
  });

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
  afterEach(async function() {
    this.timeout(15000);
    try {
      console.log(`üßπ [Records Tests] –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞: ${this.currentTest?.title}`);
      await TestUtils.quickCleanup({
        users: false, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        invites: true,
        themes: false, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—ã
        records: true, // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        settings: false // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ CMS backup
      });
    } catch (error) {
      console.warn('‚ö†Ô∏è [Records Tests] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
    }
  });
  describe('GET /api/records', () => {
    it('should get a list of published records', async () => {
      const response = await request(app)
        .get('/api/records');

      expect(response.statusCode).to.equal(200);
      void expect(response.body.success).to.equal(true);
      expect(response.body.data).to.be.an('array');
      expect(response.body.message).to.equal('Records retrieved successfully');
    });
  });

  describe('GET /api/records/:id', () => {
    it('should get a specific published record', async () => {
      // First get all records to find a valid record ID
      const listResponse = await request(app)
        .get('/api/records');

      expect(listResponse.statusCode).to.equal(200);

      if (listResponse.body.data && listResponse.body.data.length > 0) {
        // Use the first available record
        const recordId = listResponse.body.data[0].id;
        
        const response = await request(app)
          .get(`/api/records/${recordId}`);

        expect(response.statusCode).to.equal(200);
        void expect(response.body.success).to.equal(true);
        expect(response.body.data).to.have.property('id', recordId);
        void expect(response.body.data.is_published).to.be.true;
        expect(response.body.message).to.equal('Record retrieved successfully');
      } else {
        // No records exist - this is a valid state for a fresh system
        console.log('No published records found - skipping specific record test');
      }
    });

    it('should return error for non-existent record', async () => {
      const response = await request(app)
        .get('/api/records/999999');

      // The API returns 422 for validation errors (invalid ID format)
      // This is acceptable behavior for non-existent records
      expect(response.statusCode).to.equal(422);
      void expect(response.body.success).to.be.false;
    });
  });

  describe('GET /api/records with pagination', () => {
    it('should support pagination with page and size parameters', async () => {
      const response = await request(app)
        .get('/api/records?page=1&size=10');

      expect(response.statusCode).to.equal(200);
      void expect(response.body.success).to.equal(true);
      expect(response.body.data).to.be.an('object');
      expect(response.body.data).to.have.property('data');
      expect(response.body.data).to.have.property('pagination');
      expect(response.body.data.pagination).to.have.property('total');
      expect(response.body.data.pagination).to.have.property('page');
      expect(response.body.data.pagination).to.have.property('size');
      expect(response.body.data.data).to.be.an('array');
      expect(response.body.message).to.equal('Records retrieved successfully');
    });

    it('should limit page size according to CMS settings', async () => {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await TestUtils.setCMSSetting('pagination_max_size', 25, 'number');
      
      // –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º —Ä–∞–∑–º–µ—Ä–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
      const response = await request(app)
        .get('/api/records?page=1&size=1000');

      expect(response.statusCode).to.equal(200);
      void expect(response.body.success).to.equal(true);
      
      if (response.body.data && response.body.data.size) {
        // –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π max_size
        const maxSize = await TestUtils.getCMSSettingValue<number>('pagination_max_size');
        expect(response.body.data.size).to.be.at.most(maxSize);
        expect(response.body.data.size).to.be.at.most(25);
      }
    });

    it('should use default pagination when page parameter is provided without size', async () => {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      await TestUtils.setCMSSetting('pagination_size', 10, 'number');
      
      const response = await request(app)
        .get('/api/records?page=2');

      expect(response.statusCode).to.equal(200);
      void expect(response.body.success).to.equal(true);
      expect(response.body.data).to.have.property('pagination');
      expect(response.body.data.pagination).to.have.property('page', 2);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫—É
      const defaultSize = await TestUtils.getCMSSettingValue<number>('pagination_size');
      expect(response.body.data.pagination).to.have.property('size', defaultSize);
      expect(response.body.data.pagination.size).to.equal(10);
    });

    it('should use default pagination when size parameter is provided without page', async () => {
      const response = await request(app)
        .get('/api/records?size=5');

      expect(response.statusCode).to.equal(200);
      void expect(response.body.success).to.equal(true);
      expect(response.body.data).to.have.property('pagination');
      expect(response.body.data.pagination).to.have.property('page', 1); // default page
      expect(response.body.data.pagination).to.have.property('size', 5);
    });
  });

  describe('GET /api/records with filters', () => {
    it('should filter records by categories', async () => {
      const response = await request(app)
        .get('/api/records?categories=news,testing');

      expect(response.statusCode).to.equal(200);
      void expect(response.body.success).to.equal(true);
      expect(response.body.data).to.be.an('object');
      expect(response.body.data).to.have.property('data');
      expect(response.body.data.data).to.be.an('array');
      expect(response.body.message).to.equal('Records retrieved successfully');
    });

    it('should filter records by tags', async () => {
      const response = await request(app)
        .get('/api/records?tags=js,api');

      expect(response.statusCode).to.equal(200);
      void expect(response.body.success).to.equal(true);
      expect(response.body.data).to.be.an('object');
      expect(response.body.data).to.have.property('data');
      expect(response.body.data.data).to.be.an('array');
      expect(response.body.message).to.equal('Records retrieved successfully');
    });

    it('should filter records by search term', async () => {
      const response = await request(app)
        .get('/api/records?search=test');

      expect(response.statusCode).to.equal(200);
      void expect(response.body.success).to.equal(true);
      expect(response.body.data).to.be.an('object');
      expect(response.body.data).to.have.property('data');
      expect(response.body.data.data).to.be.an('array');
      expect(response.body.message).to.equal('Records retrieved successfully');
    });

    it('should combine pagination with filters', async () => {
      const response = await request(app)
        .get('/api/records?page=1&size=5&categories=news&tags=js&search=test');

      expect(response.statusCode).to.equal(200);
      void expect(response.body.success).to.equal(true);
      expect(response.body.data).to.be.an('object');
      expect(response.body.data).to.have.property('data');
      expect(response.body.data).to.have.property('pagination');
      expect(response.body.data.pagination).to.have.property('page', 1);
      expect(response.body.data.pagination).to.have.property('size', 5);
      expect(response.body.data.data).to.be.an('array');
      expect(response.body.message).to.equal('Records retrieved successfully');
    });

    it('should handle empty filter results gracefully', async () => {
      const response = await request(app)
        .get('/api/records?categories=nonexistent&tags=impossible');

      expect(response.statusCode).to.equal(200);
      void expect(response.body.success).to.equal(true);
      expect(response.body.data).to.be.an('object');
      expect(response.body.data).to.have.property('data');
      expect(response.body.data.data).to.be.an('array');
      // Empty results are valid
      expect(response.body.message).to.equal('Records retrieved successfully');
    });

    it('should handle single category filter', async () => {
      const response = await request(app)
        .get('/api/records?categories=news');

      expect(response.statusCode).to.equal(200);
      void expect(response.body.success).to.equal(true);
      expect(response.body.data).to.be.an('object');
      expect(response.body.data.data).to.be.an('array');
    });

    it('should handle single tag filter', async () => {
      const response = await request(app)
        .get('/api/records?tags=js');

      expect(response.statusCode).to.equal(200);
      void expect(response.body.success).to.equal(true);
      expect(response.body.data).to.be.an('object');
      expect(response.body.data.data).to.be.an('array');
    });
  });
});
