import Database from '../src/db';
import { ICMSSetting } from '../src/types/ICMSSetting';

interface CleanupStats {
    users: { before: number; after: number; deleted: number };
    invites: { before: number; after: number; deleted: number };
    themes: { before: number; after: number; deleted: number };
    records: { before: number; after: number; deleted: number };
    settings: { before: number; after: number; deleted: number };
}

interface CleanupOptions {
    preserveAdmins?: boolean;
    preserveProduction?: boolean;
    onlyRecentData?: boolean;
    hoursThreshold?: number;
    dryRun?: boolean;
}

class SmartTestDataCleaner {
    private db = Database;
    private options: CleanupOptions;

    constructor(options: CleanupOptions = {}) {
        this.options = {
            preserveAdmins: true,
            preserveProduction: true,
            onlyRecentData: true,
            hoursThreshold: 24, // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –º–ª–∞–¥—à–µ 24 —á–∞—Å–æ–≤
            dryRun: false,
            ...options
        };
    }

    async getStats(): Promise<CleanupStats> {
        const userCount = await this.db.query('SELECT COUNT(*) as count FROM users');
        const inviteCount = await this.db.query('SELECT COUNT(*) as count FROM invites');
        const themeCount = await this.db.query('SELECT COUNT(*) as count FROM themes');
        const recordCount = await this.db.query('SELECT COUNT(*) as count FROM records');
        const settingCount = await this.db.query('SELECT COUNT(*) as count FROM cms_settings');

        return {
            users: {
                before: (userCount.data?.[0] as any)?.count || 0,
                after: 0,
                deleted: 0
            },
            invites: {
                before: (inviteCount.data?.[0] as any)?.count || 0,
                after: 0,
                deleted: 0
            },
            themes: {
                before: (themeCount.data?.[0] as any)?.count || 0,
                after: 0,
                deleted: 0
            },
            records: {
                before: (recordCount.data?.[0] as any)?.count || 0,
                after: 0,
                deleted: 0
            },
            settings: {
                before: (settingCount.data?.[0] as any)?.count || 0,
                after: 0,
                deleted: 0
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è
     */
    private async getAdminUsers(): Promise<string[]> {
        if (!this.options.preserveAdmins) {
            return [];
        }

        const result = await this.db.query(`
            SELECT DISTINCT u.id, u.login, u.email 
            FROM users u 
            INNER JOIN user_groups ug ON u.id = ug.user_id 
            WHERE ug.group_id = 'admin'
        `);

        if (result.success && result.data) {
            const adminIds = result.data.map((admin: any) => admin.id);
            console.log(`üõ°Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${adminIds.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã:`);
            result.data.forEach((admin: any) => {
                console.log(`   - ${admin.login} (${admin.email})`);
            });
            return adminIds;
        }

        return [];
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç SQL —É—Å–ª–æ–≤–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
     */
    private getTimeCondition(column: string = 'created_at'): string {
        if (!this.options.onlyRecentData) {
            return '';
        }
        
        return `AND datetime(${column}) > datetime('now', '-${this.options.hoursThreshold} hours')`;
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º dry-run —Ä–µ–∂–∏–º–∞
     */
    private async executeQuery(query: string, params: any[] = []): Promise<any> {
        if (this.options.dryRun) {
            console.log(`[DRY RUN] ${query}`, params.length > 0 ? `with params: ${JSON.stringify(params)}` : '');
            
            // –î–ª—è dry-run –∑–∞–º–µ–Ω—è–µ–º DELETE –Ω–∞ SELECT COUNT
            if (query.trim().toUpperCase().startsWith('DELETE')) {
                const countQuery = query.replace(/^DELETE/, 'SELECT COUNT(*) as count');
                const result = await this.db.query(countQuery, params);
                return { success: true, data: result.data, rowsAffected: (result.data?.[0] as any)?.count || 0 };
            }
            
            return { success: true, data: [], rowsAffected: 0 };
        }

        return await this.db.query(query, params);
    }

    async cleanupTestUsers(): Promise<number> {
        console.log('üßπ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

        // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã
        const adminIds = await this.getAdminUsers();
        let totalDeleted = 0;

        // –°–æ–∑–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        const adminExclusion = adminIds.length > 0 
            ? `AND id NOT IN (${adminIds.map(() => '?').join(', ')})`
            : '';

        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const testPatterns = [
            'test%',
            'debug%', 
            'demo%',
            'sample%',
            'example%',
            '%@test.%',
            '%@example.%',
            '%@localhost%'
        ];

        for (const pattern of testPatterns) {
            let query: string;
            let params: any[];

            if (pattern.includes('@')) {
                // –ü–æ–∏—Å–∫ –ø–æ email
                query = `DELETE FROM users WHERE email LIKE ? ${adminExclusion} ${this.getTimeCondition('created_at')}`;
                params = [pattern, ...adminIds];
            } else {
                // –ü–æ–∏—Å–∫ –ø–æ login
                query = `DELETE FROM users WHERE login LIKE ? ${adminExclusion} ${this.getTimeCondition('created_at')}`;
                params = [pattern, ...adminIds];
            }

            const result = await this.executeQuery(query, params);
            if (result.success) {
                const deleted = result.rowsAffected || 0;
                totalDeleted += deleted;
                if (deleted > 0) {
                    console.log(`  ‚úì –£–¥–∞–ª–µ–Ω–æ ${deleted} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º: ${pattern}`);
                }
            }
        }

        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ID —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ test (–Ω–æ –Ω–µ –∞–¥–º–∏–Ω–æ–≤)
        const testIdQuery = `DELETE FROM users WHERE id LIKE '%test%' ${adminExclusion} ${this.getTimeCondition('created_at')}`;
        const testIdResult = await this.executeQuery(testIdQuery, adminIds);
        if (testIdResult.success) {
            totalDeleted += testIdResult.rowsAffected || 0;
        }

        console.log(`  üìä –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalDeleted}`);
        return totalDeleted;
    }

    async cleanupTestInvites(): Promise<number> {
        console.log('üßπ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏–Ω–≤–∞–π—Ç–æ–≤...');
        let totalDeleted = 0;

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–≤–∞–π—Ç—ã
        const unusedQuery = `DELETE FROM invites WHERE used_by IS NULL ${this.getTimeCondition('created_at')}`;
        const unusedResult = await this.executeQuery(unusedQuery);
        if (unusedResult.success) {
            totalDeleted += unusedResult.rowsAffected || 0;
        }

        // –£–¥–∞–ª—è–µ–º –∏–Ω–≤–∞–π—Ç—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏
        const testCodeQuery = `DELETE FROM invites WHERE (code LIKE 'test%' OR code LIKE 'debug%' OR code LIKE 'demo%') ${this.getTimeCondition('created_at')}`;
        const testCodeResult = await this.executeQuery(testCodeQuery);
        if (testCodeResult.success) {
            totalDeleted += testCodeResult.rowsAffected || 0;
        }

        // –£–¥–∞–ª—è–µ–º –∏–Ω–≤–∞–π—Ç—ã –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const orphanQuery = `DELETE FROM invites WHERE created_by NOT IN (SELECT id FROM users)`;
        const orphanResult = await this.executeQuery(orphanQuery);
        if (orphanResult.success) {
            totalDeleted += orphanResult.rowsAffected || 0;
        }

        console.log(`  üìä –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∏–Ω–≤–∞–π—Ç–æ–≤: ${totalDeleted}`);
        return totalDeleted;
    }

    async cleanupTestThemes(): Promise<number> {
        console.log('üßπ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–º...');

        if (!this.options.preserveProduction) {
            console.log('  ‚ö†Ô∏è  –†–µ–∂–∏–º production –æ—Ç–∫–ª—é—á–µ–Ω - —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–º—ã');
        }

        // –ù–∞—Ö–æ–¥–∏–º default/–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∑–∞—â–∏—Ç—ã
        const protectedThemes = await this.db.query(`
            SELECT id, name FROM themes 
            WHERE is_default = 1 OR is_active = 1
        `);

        const protectedIds = protectedThemes.success && protectedThemes.data 
            ? protectedThemes.data.map((theme: any) => theme.id)
            : [];

        if (protectedIds.length > 0 && this.options.preserveProduction) {
            console.log(`  üõ°Ô∏è  –ó–∞—â–∏—â–∞–µ–º ${protectedIds.length} production —Ç–µ–º`);
        }

        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–º—ã (–Ω–æ –Ω–µ default/–∞–∫—Ç–∏–≤–Ω—ã–µ)
        const protectionClause = protectedIds.length > 0 && this.options.preserveProduction
            ? `AND id NOT IN (${protectedIds.map(() => '?').join(', ')})`
            : '';

        const query = `DELETE FROM themes WHERE (name LIKE '%test%' OR name LIKE '%Test%' OR name LIKE '%DEBUG%') ${protectionClause} ${this.getTimeCondition('created_at')}`;
        const result = await this.executeQuery(query, protectedIds);

        const deleted = result.success ? (result.rowsAffected || 0) : 0;
        console.log(`  üìä –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ–º: ${deleted}`);
        return deleted;
    }

    async cleanupTestRecords(): Promise<number> {
        console.log('üßπ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π...');
        let totalDeleted = 0;

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏/—Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        const testContentQuery = `DELETE FROM records WHERE 
            (title LIKE '%test%' OR 
             title LIKE '%debug%' OR 
             title LIKE '%sample%' OR
             title LIKE '%example%' OR
             description LIKE '%test%' OR
             content LIKE '%test%')
            ${this.getTimeCondition('created_at')}`;

        const testContentResult = await this.executeQuery(testContentQuery);
        if (testContentResult.success) {
            totalDeleted += testContentResult.rowsAffected || 0;
        }

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const orphanQuery = `DELETE FROM records WHERE user_id NOT IN (SELECT id FROM users)`;
        const orphanResult = await this.executeQuery(orphanQuery);
        if (orphanResult.success) {
            totalDeleted += orphanResult.rowsAffected || 0;
        }

        console.log(`  üìä –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${totalDeleted}`);
        return totalDeleted;
    }

    async cleanupTestSettings(): Promise<number> {
        console.log('üßπ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        let totalDeleted = 0;

        // –°–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö production –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ù–ï —É–¥–∞–ª—è–µ–º)
        const productionSettings = [
            'site_name',
            'site_description', 
            'active_theme_id',
            'maintenance_mode',
            'allow_registration',
            'registration_mode',
            'default_user_role',
            'default_categories',
            'pagination_size',
            'pagination_max_size',
            'enable_search'
        ];

        const protectionClause = this.options.preserveProduction 
            ? `AND setting_key NOT IN (${productionSettings.map(() => '?').join(', ')})`
            : '';

        // –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏/–ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
        const testPrefixQuery = `DELETE FROM cms_settings WHERE 
            (setting_key LIKE '%_test' OR 
             setting_key LIKE 'test_%' OR 
             setting_key LIKE 'debug_%' OR
             setting_key LIKE '%_debug' OR
             setting_key LIKE 'sample_%')
            ${protectionClause}
            ${this.getTimeCondition('updated_at')}`;

        const params = this.options.preserveProduction ? productionSettings : [];
        const result = await this.executeQuery(testPrefixQuery, params);
        if (result.success) {
            totalDeleted += result.rowsAffected || 0;
        }

        console.log(`  üìä –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${totalDeleted}`);
        return totalDeleted;
    }

    async cleanupOrphanedData(): Promise<void> {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

        const queries = [
            'DELETE FROM sessions WHERE user_id NOT IN (SELECT id FROM users)',
            'DELETE FROM user_profiles WHERE user_id NOT IN (SELECT id FROM users)',
            'DELETE FROM user_groups WHERE user_id NOT IN (SELECT id FROM users)',
            'DELETE FROM theme_settings WHERE theme_id NOT IN (SELECT id FROM themes)',
            'DELETE FROM user_theme_preferences WHERE user_id NOT IN (SELECT id FROM users)',
            'DELETE FROM user_theme_preferences WHERE theme_id NOT IN (SELECT id FROM themes)'
        ];

        for (const query of queries) {
            await this.executeQuery(query);
        }

        console.log('  ‚úì –û—á–∏—â–µ–Ω—ã –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }

    async run(): Promise<void> {
        const mode = this.options.dryRun ? 'üîç –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö (DRY RUN)' : 'üöÄ –†–ï–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê';
        console.log(`${mode} –£–ú–ù–û–ô –û–ß–ò–°–¢–ö–ò –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•\n`);
        
        console.log('‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏:');
        console.log(`  üõ°Ô∏è  –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∞–¥–º–∏–Ω–æ–≤: ${this.options.preserveAdmins ? '–î–ê' : '–ù–ï–¢'}`);
        console.log(`  üè≠ –°–æ—Ö—Ä–∞–Ω—è—Ç—å production –¥–∞–Ω–Ω—ã–µ: ${this.options.preserveProduction ? '–î–ê' : '–ù–ï–¢'}`);
        console.log(`  ‚è∞ –¢–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ: ${this.options.onlyRecentData ? `–î–ê (${this.options.hoursThreshold}—á)` : '–ù–ï–¢'}`);
        console.log('');

        try {
            const statsBefore = await this.getStats();
            
            console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û –û–ß–ò–°–¢–ö–ò:');
            console.log(`  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${statsBefore.users.before}`);
            console.log(`  üìß –ò–Ω–≤–∞–π—Ç—ã: ${statsBefore.invites.before}`);
            console.log(`  üé® –¢–µ–º—ã: ${statsBefore.themes.before}`);
            console.log(`  üìù –ó–∞–ø–∏—Å–∏: ${statsBefore.records.before}`);
            console.log(`  ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${statsBefore.settings.before}\n`);

            if (!this.options.dryRun) {
                await this.db.beginTransaction();
            }

            try {
                await this.cleanupTestUsers();
                await this.cleanupTestInvites(); 
                await this.cleanupTestRecords();
                await this.cleanupTestThemes();
                await this.cleanupTestSettings();
                await this.cleanupOrphanedData();

                if (!this.options.dryRun) {
                    await this.db.commitTransaction();
                    console.log('\n‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                }

            } catch (error) {
                if (!this.options.dryRun) {
                    await this.db.rollbackTransaction();
                }
                throw error;
            }

            const statsAfter = await this.getStats();
            
            console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò:');
            console.log(`  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${statsAfter.users.before} (—É–¥–∞–ª–µ–Ω–æ: ${statsBefore.users.before - statsAfter.users.before})`);
            console.log(`  üìß –ò–Ω–≤–∞–π—Ç—ã: ${statsAfter.invites.before} (—É–¥–∞–ª–µ–Ω–æ: ${statsBefore.invites.before - statsAfter.invites.before})`);
            console.log(`  üé® –¢–µ–º—ã: ${statsAfter.themes.before} (—É–¥–∞–ª–µ–Ω–æ: ${statsBefore.themes.before - statsAfter.themes.before})`);
            console.log(`  üìù –ó–∞–ø–∏—Å–∏: ${statsAfter.records.before} (—É–¥–∞–ª–µ–Ω–æ: ${statsBefore.records.before - statsAfter.records.before})`);
            console.log(`  ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${statsAfter.settings.before} (—É–¥–∞–ª–µ–Ω–æ: ${statsBefore.settings.before - statsAfter.settings.before})`);

            const totalDeleted = 
                (statsBefore.users.before - statsAfter.users.before) +
                (statsBefore.invites.before - statsAfter.invites.before) +
                (statsBefore.themes.before - statsAfter.themes.before) +
                (statsBefore.records.before - statsAfter.records.before) +
                (statsBefore.settings.before - statsAfter.settings.before);

            console.log(`\nüéØ –ò–¢–û–ì–û –£–î–ê–õ–ï–ù–û: ${totalDeleted} –∑–∞–ø–∏—Å–µ–π`);
            
            if (this.options.dryRun) {
                console.log('üîç –≠–¢–û –ë–´–õ –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö - –î–ê–ù–ù–´–ï –ù–ï –ò–ó–ú–ï–ù–ï–ù–´!');
            } else {
                console.log('üéâ –£–ú–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
            }

        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ß–ò–°–¢–ö–ï:', error);
            throw error;
        }
    }
}

// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    const dryRun = process.argv.includes('--dry-run');
    const preserveAdmins = !process.argv.includes('--no-preserve-admins');
    const preserveProduction = !process.argv.includes('--no-preserve-production');
    const hoursThreshold = parseInt(process.argv.find(arg => arg.startsWith('--hours='))?.split('=')[1] || '24');
    
    const cleaner = new SmartTestDataCleaner({
        dryRun,
        preserveAdmins,
        preserveProduction,
        hoursThreshold
    });
    
    cleaner.run()
        .then(() => {
            console.log('\n‚úÖ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

export default SmartTestDataCleaner;