import Database from '../src/db';
import { ICMSSetting } from '../src/types/ICMSSetting';

interface CleanupStats {
    users: { before: number; after: number; deleted: number };
    invites: { before: number; after: number; deleted: number };
    themes: { before: number; after: number; deleted: number };
    records: { before: number; after: number; deleted: number };
    settings: { before: number; after: number; deleted: number };
}

class TestDataCleaner {
    private db = Database;

    async getStats(): Promise<CleanupStats> {
        const userCount = await this.db.query('SELECT COUNT(*) as count FROM users');
        const inviteCount = await this.db.query('SELECT COUNT(*) as count FROM invites');
        const themeCount = await this.db.query('SELECT COUNT(*) as count FROM themes');
        const recordCount = await this.db.query('SELECT COUNT(*) as count FROM records');
        const settingCount = await this.db.query('SELECT COUNT(*) as count FROM cms_settings');

        return {
            users: {
                before: (userCount.data?.[0] as any)?.count || 0,
                after: 0,
                deleted: 0
            },
            invites: {
                before: (inviteCount.data?.[0] as any)?.count || 0,
                after: 0,
                deleted: 0
            },
            themes: {
                before: (themeCount.data?.[0] as any)?.count || 0,
                after: 0,
                deleted: 0
            },
            records: {
                before: (recordCount.data?.[0] as any)?.count || 0,
                after: 0,
                deleted: 0
            },
            settings: {
                before: (settingCount.data?.[0] as any)?.count || 0,
                after: 0,
                deleted: 0
            }
        };
    }

    /**
     * –ü–†–û–°–¢–ê–Ø –ó–ê–©–ò–¢–ê –ê–î–ú–ò–ù–û–í - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å admin —Ä–æ–ª—å—é
     */
    private async getProtectedUserIds(): Promise<string[]> {
        const result = await this.db.query(`
            SELECT DISTINCT u.id 
            FROM users u 
            INNER JOIN user_groups ug ON u.id = ug.user_id 
            WHERE ug.group_id = 'admin'
        `);

        if (result.success && result.data) {
            const adminIds = result.data.map((admin: any) => admin.id);
            console.log(`üõ°Ô∏è  –ó–∞—â–∏—â–∞–µ–º ${adminIds.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è`);
            return adminIds;
        }

        return [];
    }

    async cleanupTestUsers(): Promise<number> {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        // –ü–û–õ–£–ß–ê–ï–ú –ê–î–ú–ò–ù–û–í –î–õ–Ø –ó–ê–©–ò–¢–´
        const protectedIds = await this.getProtectedUserIds();
        
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏/email
        const testPatterns = [
            'test%',
            'debug%', 
            'demo%',
            'sample%',
            'example%',
            '%@test.%',
            '%@example.%',
            '%@localhost%'
        ];

        let totalDeleted = 0;

        for (const pattern of testPatterns) {
            if (pattern.includes('@')) {
                // –ü–æ–∏—Å–∫ –ø–æ email + –∑–∞—â–∏—Ç–∞ –∞–¥–º–∏–Ω–æ–≤
                const excludeClause = protectedIds.length > 0 
                    ? `AND id NOT IN (${protectedIds.map(() => '?').join(', ')})` 
                    : '';
                
                const result = await this.db.query(
                    `DELETE FROM users WHERE email LIKE ? ${excludeClause}`,
                    [pattern, ...protectedIds]
                );
                if (result.success) {
                    console.log(`  ‚úì –£–¥–∞–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å email –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º: ${pattern}`);
                }
            } else {
                // –ü–æ–∏—Å–∫ –ø–æ login + –∑–∞—â–∏—Ç–∞ –∞–¥–º–∏–Ω–æ–≤
                const excludeClause = protectedIds.length > 0 
                    ? `AND id NOT IN (${protectedIds.map(() => '?').join(', ')})` 
                    : '';
                
                const result = await this.db.query(
                    `DELETE FROM users WHERE login LIKE ? ${excludeClause}`,
                    [pattern, ...protectedIds]
                );
                if (result.success) {
                    console.log(`  ‚úì –£–¥–∞–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å login –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º: ${pattern}`);
                }
            }
        }

        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ID —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ test + –∑–∞—â–∏—Ç–∞ –∞–¥–º–∏–Ω–æ–≤
        const excludeClause = protectedIds.length > 0 
            ? `AND id NOT IN (${protectedIds.map(() => '?').join(', ')})` 
            : '';
        
        await this.db.query(
            `DELETE FROM users WHERE id LIKE '%test%' ${excludeClause}`,
            protectedIds
        );

        console.log(`  üìä –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∞–¥–º–∏–Ω—ã –∑–∞—â–∏—â–µ–Ω—ã)`);
        return totalDeleted;
    }

    async cleanupTestInvites(): Promise<number> {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤...');
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–≤–∞–π—Ç—ã (—Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)
        const unusedResult = await this.db.query(
            `DELETE FROM invites WHERE used_by IS NULL AND datetime(created_at) < datetime('now', '-1 day')`
        );

        // –£–¥–∞–ª—è–µ–º –∏–Ω–≤–∞–π—Ç—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏
        const testCodeResult = await this.db.query(
            `DELETE FROM invites WHERE code LIKE 'test%' OR code LIKE 'debug%' OR code LIKE 'demo%'`
        );

        // –£–¥–∞–ª—è–µ–º –∏–Ω–≤–∞–π—Ç—ã –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const orphanResult = await this.db.query(
            `DELETE FROM invites WHERE created_by NOT IN (SELECT id FROM users)`
        );

        console.log('  ‚úì –£–¥–∞–ª–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–≤–∞–π—Ç—ã —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è');
        console.log('  ‚úì –£–¥–∞–ª–µ–Ω—ã –∏–Ω–≤–∞–π—Ç—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏');
        console.log('  ‚úì –£–¥–∞–ª–µ–Ω—ã –∏–Ω–≤–∞–π—Ç—ã –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

        return 0;
    }

    async cleanupTestThemes(): Promise<number> {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ–º...');
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É
        const defaultTheme = await this.db.query(
            `SELECT id FROM themes WHERE is_default = 1 LIMIT 1`
        );

        let keepThemeId = null;
        if (defaultTheme.success && defaultTheme.data && defaultTheme.data.length > 0) {
            keepThemeId = (defaultTheme.data[0] as any).id;
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–∞–π–¥–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é
            const activeTheme = await this.db.query(
                `SELECT id FROM themes WHERE is_active = 1 LIMIT 1`
            );
            if (activeTheme.success && activeTheme.data && activeTheme.data.length > 0) {
                keepThemeId = (activeTheme.data[0] as any).id;
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º, –æ—Å—Ç–∞–≤–∏–º –ø–µ—Ä–≤—É—é
                const firstTheme = await this.db.query(
                    `SELECT id FROM themes ORDER BY created_at ASC LIMIT 1`
                );
                if (firstTheme.success && firstTheme.data && firstTheme.data.length > 0) {
                    keepThemeId = (firstTheme.data[0] as any).id;
                }
            }
        }

        if (keepThemeId) {
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–º—ã –∫—Ä–æ–º–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π
            await this.db.query(
                `DELETE FROM themes WHERE id != ?`,
                [keepThemeId]
            );

            // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –æ—Å—Ç–∞–≤—à–∞—è—Å—è —Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞
            await this.db.query(
                `UPDATE themes SET is_active = 1, is_default = 1 WHERE id = ?`,
                [keepThemeId]
            );

            console.log(`  ‚úì –û—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞ (ID: ${keepThemeId})`);
        }

        return 0;
    }

    async cleanupTestRecords(): Promise<number> {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π...');
        
        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        await this.db.query(
            `DELETE FROM records WHERE 
             title LIKE '%test%' OR 
             title LIKE '%debug%' OR 
             title LIKE '%sample%' OR
             title LIKE '%example%' OR
             description LIKE '%test%' OR
             content LIKE '%test%'`
        );

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await this.db.query(
            `DELETE FROM records WHERE user_id NOT IN (SELECT id FROM users)`
        );

        console.log('  ‚úì –£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏/—Å–æ–¥–µ—Ä–∂–∏–º—ã–º');
        console.log('  ‚úì –£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

        return 0;
    }

    async cleanupTestSettings(): Promise<number> {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        
        // –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        const testSettings = [
            'availability_test',
            'test_setting',
            'debug_mode',
            'sample_config'
        ];

        // –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å _test —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
        await this.db.query(`DELETE FROM cms_settings WHERE setting_key LIKE '%_test'`);
        await this.db.query(`DELETE FROM cms_settings WHERE setting_key LIKE 'test_%'`);
        await this.db.query(`DELETE FROM cms_settings WHERE setting_key LIKE 'debug_%'`);

        // –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for (const setting of testSettings) {
            await this.db.query(`DELETE FROM cms_settings WHERE setting_key = ?`, [setting]);
        }

        console.log('  ‚úì –£–¥–∞–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å _test/_debug —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏');
        console.log('  ‚úì –£–¥–∞–ª–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');

        return 0;
    }

    async cleanupOrphanedData(): Promise<void> {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await this.db.query(`DELETE FROM sessions WHERE user_id NOT IN (SELECT id FROM users)`);
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
        await this.db.query(`DELETE FROM user_profiles WHERE user_id NOT IN (SELECT id FROM users)`);
        
        // –û—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await this.db.query(`DELETE FROM user_groups WHERE user_id NOT IN (SELECT id FROM users)`);
        
        // –û—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–º
        await this.db.query(`DELETE FROM theme_settings WHERE theme_id NOT IN (SELECT id FROM themes)`);
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Ç–µ–º
        await this.db.query(`DELETE FROM user_theme_preferences WHERE user_id NOT IN (SELECT id FROM users)`);
        await this.db.query(`DELETE FROM user_theme_preferences WHERE theme_id NOT IN (SELECT id FROM themes)`);

        console.log('  ‚úì –û—á–∏—â–µ–Ω—ã –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }

    async run(): Promise<void> {
        console.log('üöÄ –ó–ê–ü–£–°–ö –ë–ï–ó–û–ü–ê–°–ù–û–ô –û–ß–ò–°–¢–ö–ò –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•\n');
        
        try {
            const statsBefore = await this.getStats();
            
            console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û –û–ß–ò–°–¢–ö–ò:');
            console.log(`  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${statsBefore.users.before}`);
            console.log(`  üìß –ò–Ω–≤–∞–π—Ç—ã: ${statsBefore.invites.before}`);
            console.log(`  üé® –¢–µ–º—ã: ${statsBefore.themes.before}`);
            console.log(`  üìù –ó–∞–ø–∏—Å–∏: ${statsBefore.records.before}`);
            console.log(`  ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${statsBefore.settings.before}\n`);

            // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            await this.db.beginTransaction();

            try {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏)
                await this.cleanupTestUsers();
                await this.cleanupTestInvites(); 
                await this.cleanupTestRecords();
                await this.cleanupTestThemes();
                await this.cleanupTestSettings();
                await this.cleanupOrphanedData();

                // –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await this.db.commitTransaction();
                console.log('\n‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

            } catch (error) {
                // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await this.db.rollbackTransaction();
                throw error;
            }

            const statsAfter = await this.getStats();
            
            console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò:');
            console.log(`  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${statsAfter.users.before} (—É–¥–∞–ª–µ–Ω–æ: ${statsBefore.users.before - statsAfter.users.before})`);
            console.log(`  üìß –ò–Ω–≤–∞–π—Ç—ã: ${statsAfter.invites.before} (—É–¥–∞–ª–µ–Ω–æ: ${statsBefore.invites.before - statsAfter.invites.before})`);
            console.log(`  üé® –¢–µ–º—ã: ${statsAfter.themes.before} (—É–¥–∞–ª–µ–Ω–æ: ${statsBefore.themes.before - statsAfter.themes.before})`);
            console.log(`  üìù –ó–∞–ø–∏—Å–∏: ${statsAfter.records.before} (—É–¥–∞–ª–µ–Ω–æ: ${statsBefore.records.before - statsAfter.records.before})`);
            console.log(`  ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${statsAfter.settings.before} (—É–¥–∞–ª–µ–Ω–æ: ${statsBefore.settings.before - statsAfter.settings.before})`);

            const totalDeleted = 
                (statsBefore.users.before - statsAfter.users.before) +
                (statsBefore.invites.before - statsAfter.invites.before) +
                (statsBefore.themes.before - statsAfter.themes.before) +
                (statsBefore.records.before - statsAfter.records.before) +
                (statsBefore.settings.before - statsAfter.settings.before);

            console.log(`\nüéØ –ò–¢–û–ì–û –£–î–ê–õ–ï–ù–û: ${totalDeleted} –∑–∞–ø–∏—Å–µ–π`);
            console.log('üéâ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
            console.log('üõ°Ô∏è  –ê–î–ú–ò–ù–´ –ó–ê–©–ò–©–ï–ù–´ –û–¢ –£–î–ê–õ–ï–ù–ò–Ø!');

        } catch (error) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ß–ò–°–¢–ö–ï:', error);
            throw error;
        }
    }
}

// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    const cleaner = new TestDataCleaner();
    cleaner.run()
        .then(() => {
            console.log('\n–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
            process.exit(0);
        })
        .catch((error) => {
            console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

export default TestDataCleaner;